Convert between Roman Numeral and Base 10 and vice versa upto 3999                                                                                                                                                                           

Conversion of Roman Numerals to int.

1. Identify unique tokens  
 $romanTokens       =   ['I'=>1, 'V'=>5, 'X'=>10, 'L'=>50, 'C'=>100, 'D'=>500, 'M'=>1000 ];
 $subtractionPairs  =   ['V'=>'I', 'X'=>'I', 'L'=>, 'C'=>'X', 'D'=>'C', 'M'=>'C' ];


toBase10
Roman numerals can be translated to base10 by looping through the string, mapping it to it's known base10 value and putting this in the currentTotal.
    the $currentValue (roman) is then stored as $previousValue.
    each following iteration compares the previous value to the current value. 
        If the $previousValue is less than the currentvalue and is equal to the currenValue's subtractionPair[value] , // e.g., XL 
            we have do $currentTotal = $previousValue - $currentValue;
        else if  $previousValue is less than the currentvalue and is NOT equal to the currenValue's subtractionPair[value] // e.g., VL
            we return an error
    else $currentTotal += $currentValue;
    through all iterations of the $input string;

Rules:
Range: 1 - 3,999
Covert to upperCase;
Tokens must be a key in $romanTokens;

test cases:
try/catch if $input is not numeric or $input <= 0 or $input > 3999 or contains spaces;
if $previousValue !=  $subtractionPairs; (illegal strings)
    $illegalValues = [
                    'IM','VM','LM','DM', 
                    'ID','VD','LD','XD', 
                    'IC','VC','LD',
                    'IC', VC',
                    'VX' 
                ];
    throw exception




    throw exception
